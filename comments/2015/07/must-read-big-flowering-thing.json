{
  "comments": [
    {
      "date": "17 July 2015 20:03",
      "html": "Probably the most pragmatic view on the DevOps / SDN hype I&#39;ve read yet.",
      "id": "6923370672610960055",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Anonymous",
      "profile": null,
      "pub": "2015-07-17T20:03:52.020+02:00",
      "ref": "5308961411202759589",
      "type": "comment"
    },
    {
      "comments": [
        {
          "date": "20 July 2015 16:21",
          "html": "From an engineer&#39;s point of view, the whole Big Flowering thing gives me a network made of a lot of building blocks together in a configuration that should be &#39;optimal&#39;. Only 1) it&#39;s not optimal for the particular network I need it for and 2) if one of the building blocks breaks (which it will inevitably do at some point), I&#39;m stuck with a premade solution that I can&#39;t troubleshoot.<br />It *could* make my job redundant: just call the prefab manufacturer (vendor) and let him deal with it.<br /><br />Oh wait, I almost forgot. 4 hour SLA time just to pick up the ticket, 15 service desk guys not getting it, escalation and finally some engineer that was involved in the prefab process telling you it&#39;s a bug and we&#39;ll research it. No there&#39;s no way to work around it, it&#39;s all prefab, remember?<br /><br />For me, SD was invented to work around the problem &quot;we&#39;re unable to communicate properly with the network engineers&quot; so it gives an alternative that will work right away, or so is claimed. I&#39;ll leave it in the middle who can&#39;t communicate properly here: managers and customers aren&#39;t always clear about what they want, engineers however need to learn to ask the right questions and understand what they&#39;re providing to them.",
          "id": "1325455249860342546",
          "image": "https://resources.blogblog.com/img/blank.gif",
          "name": "Anonymous",
          "profile": null,
          "pub": "2015-07-20T16:21:30.781+02:00",
          "ref": "2836266398982409387",
          "type": "comment"
        }
      ],
      "date": "17 July 2015 23:29",
      "html": "I don&#39;t get this guy.<br /><br />So Oswalt doesn&#39;t like Big Fucking Things. He wants the Unix Philosophy. What&#39;s that ? Firstly it&#39;s the approach where you build a lot of small programs that act as building blocks for the user. And then the user can glue those block together and build the system he wants. Secondly, all the other guidelines in that philosophy are about writing code.<br /><br />So what I get from that is that Oswalt doesn&#39;t want a Big Fucking Thing. He wants building blocks, so he can glue them together and build his own system.<br /><br />Isn&#39;t that what everybody had for the last 30 years ?<br /><br />Network design consists of a *huge* pile of building blocks. Physical blocks, like routers, switches, load-balancers, firewalls, application-gateways, dns-servers, you name it.<br /><br />You can take this even further. Network design has even more non-physical blocks. Like 4 different routing protocols to chose from. Plus you can misuse BGP in all kinds of filthy ways if you want to. :) Different bridging protocols (3 linkstate bridging protocols alone !). Different tunneling protocols at layer 3. Or at layer 2. A dozen different VPN technologies and protocols. The DNS. NAT. There are hundreds of building blocks already.<br /><br />There you go. There&#39;s your pile of neat building blocks. Go and have fun.<br /><br />I thought one of the reasons people wanted SDN, is because they wanted to deal with &quot;the network&quot;. Think about &quot;the network&quot;&#39;s performance, &quot;the network&quot;&#39;s robustness, the service that will run over &quot;the network&quot;. They didn&#39;t want to deal with 100s or 1000s of individual boxes. They didn&#39;t want the distributed config and troubleshooting nightmare anymore. They wanted One Big Fucking Thing. So they could think and deal with just one thing. And keep a sane mind.<br /><br />So what is ? I don&#39;t understand it.<br />Just curious.",
      "id": "2836266398982409387",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Henk",
      "profile": null,
      "pub": "2015-07-17T23:29:50.824+02:00",
      "ref": "5308961411202759589",
      "type": "comment"
    },
    {
      "date": "19 July 2015 17:49",
      "html": "Networkers want building blocks to build networks. Everyone else who need networks to connect up their applications and users want one big flowering thing. Every discipline above networking including the network engineers boss wants the network abstracted away. In my opinion networkers and their vendorsmshould be building transport networks and everyone else should be building overlays.",
      "id": "2898885437520751040",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Unknown",
      "profile": "https://www.blogger.com/profile/06282805246388430473",
      "pub": "2015-07-19T17:49:25.423+02:00",
      "ref": "5308961411202759589",
      "type": "comment"
    },
    {
      "date": "29 July 2015 17:14",
      "html": "Henk said:<br /><br />Network design consists of a *huge* pile of building blocks. Physical blocks, like routers, switches, load-balancers, firewalls, application-gateways, dns-servers, you name it. <br /><br />--<br />That&#39;s not really true.  Yes, those are building blocks, but at a larger scale than what Matt is advocating for.  Think about the number of times you&#39;ve bought a switch from a vendor, or a router, which had feature X but not feature Y, when the best device for your application would be feature X + feature Y.  This is a very common case in service provider networks and is also common in enterprise networks.  The devil in the details is &quot;positioning&quot; and most vendors would like you to buy two boxes rather than one.  The cost for development of a feature tends to be born by individual product teams who don&#39;t work collectively towards a shared set of goals.  The situation is improving, but it&#39;s not improving fast enough.<br /><br />Matt&#39;s conjecture seems to be that if you&#39;re going to give me feature X, then give me feature Y as well but let me choose where to put them.  His argument is that it&#39;s not up to the vendors to determine whether or not I get feature Y in my data center switch; it&#39;s up to me as the customer.  And that makes total sense.<br />",
      "id": "7401149780252250148",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Timothy Brown",
      "profile": "http://twitter.com/tcb79",
      "pub": "2015-07-29T17:14:02.172+02:00",
      "ref": "5308961411202759589",
      "type": "comment"
    }
  ],
  "count": 5,
  "id": "5308961411202759589",
  "type": "post",
  "url": "2015/07/must-read-big-flowering-thing.html"
}