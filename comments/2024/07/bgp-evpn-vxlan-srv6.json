{
   "comments": [
      {
         "comments": [
            {
               "date": "25 July 2024 11:50",
               "html": "<p>I always claim it&#39;s a solution in search of a problem unless you happen to be a vendor desperate to sell expensive new ASICs, in which case it&#39;s manna from heaven ;)</p>\n",
               "id": "2342",
               "name": "Ivan Pepelnjak",
               "pub": "2024-07-25T11:50:52",
               "ref": "2340",
               "type": "comment"
            }
         ],
         "date": "25 July 2024 10:12",
         "html": "<p>What&#39;s the point of SRv6? To me it&#39;s like those esoteric Linux distributions - yes, you can make them work, but why? I use Arch BTW.</p>\n",
         "id": "2340",
         "name": " Dmytro Shypovalov",
         "pub": "2024-07-25T10:12:19",
         "type": "comment"
      },
      {
         "comments": [
            {
               "date": "25 July 2024 12:45",
               "html": "<p>&gt; What&#39;s the point of SRv6?</p>\n\n<p>Firstly, I&#39;m not speaking for my employer here. I have hardly worked yet on SRv6 myself. My team-mates do that. I focus on other stuff for now.</p>\n\n<p>There are several benefits of SRv6 that I&#39;ve heard of.</p>\n\n<p>1) You&#39;ll have one address space for addresses and labels. Some people like that.</p>\n\n<p>2) You have network programmability inside your SIDs. You can do stuff like NFV, etc. I have no idea how many networks really use this.</p>\n\n<p>3) You can have non-SRv6 speakers in your SRv6 network. As the destination-addresses, which are SIDs/locators, are still just IPv6-addresses, any router that does IPv6 but not SRv6, can still be deployed in your SRv6 network.</p>\n\n<p>Personally I don&#39;t care about that reason. I really dislike it when a nice clean new technology gets mucked up, just so it is a bit easier to migrate an existing network. The migrations will finished within a few years. And then you have those ugly details and hacks remaining for the next 3 decades.</p>\n\n<p>4) You can summarize locators.</p>\n\n<p>This is the big benefit in my eyes. We know how to build a network with a 1000 or so routers, in one IGP domain. But once we go bigger, things are not trivial anymore. We can use BGP to glue parts of the network together. We can divide an IGP into areas. But that causes other problems or inefficiencies. E.g. if you do SR-MPLS, what MPLS labels are your L1L2 routers gonna advertise? They&#39;ll need to advertise all MPLS labels for all the loopbacks in the L1 area. And the other way around (L2-&gt;L1) is even worse (even more loopbacks). We can not (really) summarize MPLS labels in the control plane. And we sure as hell can not summarize MPLS labels in the dataplane.</p>\n\n<p>With SRv6, this problem is solved. The L1L2 routers can summarize not only the regular prefixes in the area, but also the locators, the flex-algo locators, etc. The only remaining problem is when BGP-speakers expect to see /32s (or /128s) for every peer they talk to. There are no elegant solutions for this yet, so it would be the next problem to fix.</p>\n\n<p>You probably don&#39;t care about summarizable locators, or networks with 10k+ routers. But in the end: &quot;the only problem is scalability&quot;. (I though that was a quote from Randy Bush. But Google can&#39;t find it. So not sure). My big interest in my career has been scalability in routing protocols. (And performance, robustness and convergence, as they are all closely related). So I like it when SRv6 locators can be summarized.</p>\n\n<p>Or maybe someone with a lot of cash to spend on new routers can ask their supplier for summarizable MPLS labels? :) In today&#39;s companies, nobody will listen to a simple engineer as myself. But if a large ISP or hyperscaler, with a fat wallet, asks for something, that could make a difference. :) But then, nobody asked for summarizable MPLS labels during the last 25 years, so I expect nobody will any time soon.</p>\n",
               "id": "2343",
               "name": "Henk",
               "pub": "2024-07-25T12:45:13",
               "ref": "2341",
               "type": "comment"
            },
            {
               "date": "25 July 2024 07:40",
               "html": "<p>I don&#39;t really understand the first 2 arguments, how is that different from SR-MPLS?</p>\n\n<p>The summarization argument is interesting. This obviously is applicable only to hierarchical designs, with multiple IGP domains. So with appropriate addressing of locators, you can advertise only a summary route to other domains.</p>\n\n<p>My question is whether there are ASICs that support longest prefix match for SRv6 locators? LPM is more complicated and expensive than exact match, and now this has to be implemented for a new encapsulation. And how is this done, I presume recirculation similar to what happens in L3VPN with per-VRF label? I haven&#39;t worked with SRv6 but very curious to look at hardware limitations and caveats. What I know for sure is that SID depth for SRv6 is typically much lower than for SR-MPLS, which limits traffic engineering capabilities.</p>\n\n<p>Also, while SR-MPLS strictly speaking doesn&#39;t have summarization, you can use IS-IS area proxy and advertise only area segment into L2, so routers won&#39;t receive L1 routes/SID. This will save FIB space. The downside is that controller will be required to reach routers inside L1, so it&#39;s not the most robust design, but allows to do &quot;sort of&quot; summarization with SR-MPLS.</p>\n",
               "id": "2344",
               "name": "Dmytro Shypovalov",
               "pub": "2024-07-25T19:40:07",
               "ref": "2343",
               "type": "comment"
            },
            {
               "date": "26 July 2024 12:51",
               "html": "<p>&gt; advertise only a summary route to other domains</p>\n\n<p>Domains or areas, yes. As I heard tli once say: &quot;the only real tool we have for scalability is hierarchy with summarization&quot;. We have that in IGPs with areas. Or multiple IGP domains with redistribution (which is not much different). But if the areas have limitations, and you can&#39;t really use them, we have no real tool for scalability.</p>\n\n<p>&gt; there are ASICs that support longest prefix match for SRv6 locators?</p>\n\n<p>Remember that SRv6 locators look just like IPv6 addresses. And hardware has been capable to do LPM for IPv6 for decades. So yeah.</p>\n\n<p>&gt;  SID depth for SRv6 is typically much lower than for SR-MPLS</p>\n\n<p>Yes. But how many SIDs do you really need? For TI-LFA 2 SIDs is usually enough (for the P-node and the Q-node). For uloop-avoidance, 1 or 2 SIDs, is usually enough. For VPNs you might need 2 SIDs. Only for real TE you might need more. I&#39;ve heard in the real world, have 2-3 SIDs is usually enough for TE. Also, I think MTUs are huge these days. So the overhead of a few SIDs doesn&#39;t matter. The only issue is how many SIDs can a router deal with itself? (I have no idea, tbh. I am not a hardware guy).</p>\n\n<p>&gt; you can use IS-IS area proxy and advertise only area segment into L2, so routers won&#39;t receive L1 routes/SID.</p>\n\n<p>I don&#39;t think this does what you want it to do. There are other, simpler ways to advertise &quot;a prefix of MPLS labels&quot;. See binding-SIDs. The problem is that when the control-plane knows about these &quot;MPLS prefixes&quot;, the hardware does not. So any packet destined for a label out of such  a &quot;MPLS prefix&quot; can not be forwarded. If it was up to me (but it isn&#39;t), the next feature for SR/MPLS forwarding hardware for all vendors would be the ability to do LPM for labels. I think that would help build easier larger more scalable networks. But if we don&#39;t have that in SR-MPLS, we do have it in SRv6.</p>\n\n<p>And that was my point. Summarizable SRv6 SIDs (aka locators) allow you to build much larger networks.</p>\n",
               "id": "2346",
               "name": "Henk  ",
               "pub": "2024-07-26T00:51:54",
               "ref": "2344",
               "type": "comment"
            },
            {
               "date": "26 July 2024 12:39",
               "html": "<p>&gt; how is that different from SR-MPLS?</p>\n\n<p>The first argument is not very impressive. Right now people have to give every box in their network one or more IPv4 addresses, one or more IPv6 address, and one or more SR-MPLS labels. That&#39;s 3 address-spaces to take numbers from. If you do SRv6, where labels are just IPv6 addresses (or IPv6 prefixes, depending on how you look at locators), you have only 2 address spaces. I don&#39;t think that is a huge benefit. I don&#39;t run a network. I was just repeating what I heard.</p>\n\n<p>The 2nd argument requires a bit more knowledge about SR6v. Remember, SRv6 locators are just IPv6 addresses. An operator reserves a prefix to cut locators out. So suppose they assign a /48 for the locators. Lets say we use 1:2:3::0/48. Then you need to cut individual locators for each router. Let&#39;s take 16 bits for that. So now the locator for router N is 1:2:3:N::/64. Now you want to assign locators for flex-algos. Let&#39;s use 8 bits for that. So the locator for router N, flex-algo F is: 1:2:3:N:F0::/72. That&#39;s it. That&#39;s the bits you need for SRv6 routing.</p>\n\n<p>But you still have the last 56 bits that are zeros. Unused. You could use them. The idea is that you can but &quot;instructions&quot; into those 56 bits. An operator and a parameter. Or an operator and two parameter. And you might be able to fix more than one instruction in those 56 bits. The instructions could be: &quot;this packet needs to go through a firewall&quot;. Or &quot;this packet needs to go through NAT&quot;. I don&#39;t know much about real world application, but that is the idea.</p>\n\n<p>You&#39;re not gonna be able to do this with SR-MPLS. With SR-MPLS you get 20 bit address-space. And that is it. Not enough to do fancy things. (Unless you go stack a shitload of labels, maybe).</p>\n",
               "id": "2345",
               "name": "Henk  ",
               "pub": "2024-07-26T00:39:28",
               "ref": "2344",
               "type": "comment"
            },
            {
               "date": "26 July 2024 04:24",
               "html": "<p>&gt; Remember that SRv6 locators look just like IPv6 addresses.</p>\n\n<p>Is this also true for uSID? </p>\n\n<p>&gt; So suppose they assign a /48 for the locators. Lets say we use 1:2:3::0/48. Then you need to cut individual locators for each router. Let&#39;s take 16 bits for that. So now the locator for router N is 1:2:3:N::/64. Now you want to assign locators for flex-algos. Let&#39;s use 8 bits for that. So the locator for router N, flex-algo F is: 1:2:3:N:F0::/72. That&#39;s it. That&#39;s the bits you need for SRv6 routing.</p>\n\n<p>Okay, this makes sense. Easier administration than a variety of MPLS labels. BTW, does this work for uSID which is much shorter? </p>\n\n<p>Also I&#39;m curious to see an existing design leveraging SRv6 to solve actual problems that cannot be solved or are difficult to solve with SR-MPLS.</p>\n",
               "id": "2347",
               "name": "Dmytro Shypovalov",
               "pub": "2024-07-26T16:24:30",
               "ref": "2345",
               "type": "comment"
            },
            {
               "date": "26 July 2024 04:27",
               "html": "<p>&gt; Also I&#39;m curious to see an existing design leveraging SRv6 to solve actual problems that cannot be solved or are difficult to solve with SR-MPLS.</p>\n\n<p>Come on, did you have to ask for that? &#x1F923;&#x1F923; Spoilsport! &#x1F61C;</p>\n",
               "id": "2348",
               "name": "Ivan Pepelnjak",
               "pub": "2024-07-26T16:27:52",
               "ref": "2347",
               "type": "comment"
            }
         ],
         "date": "25 July 2024 11:18",
         "html": "<p>The reason of L2VPN is becoming more popular by service providers and customers is about provisioning complexity.</p>\n\n<p>With an L3VPN usually you have to spend weeks on agreeing configuration details with your service provider. This process is very difficult to automate.\nWith an L2VPN you just have to accept a few parameters and you can connect immediately. Even you can have a Network-as-a-Service style. The only disadvantage is to install your own edge routers to separate the service provider section from your private section.</p>\n\n<p>By the way, this is where private LISP could be an easy to use alternative to private MPLS for your private WAN on top of L2VPN telco services. :-)</p>\n\n<p>L2VPNs can be also automatically provisioned through a number of different service provider sections. L3VPNs are more difficult to manage over multiple service provider sections. It is doable, but not easy to automate.</p>\n\n<p>The Metro Ethernet Forum has tons of specifications on the different VPN services. There you can see clearly the difference.</p>\n",
         "id": "2341",
         "name": "Bela Varkonyi",
         "pub": "2024-07-25T11:18:58",
         "type": "comment"
      },
      {
         "date": "26 July 2024 06:14",
         "html": "<p>&gt; Is this also true for uSID?</p>\n\n<p>Yes.  </p>\n\n<p>SRv6 works like this: after the normal IPv6 header, there is a new header, the SRH (Segment Routing Header). The SRH holds a list of all IPv6 addresses/locators of intermediate routers that have to be traversed in the path to the destination. Each router on this list must be a SRv6 speaker. But the other intermediate routers do not need to be SRv6 capable.</p>\n\n<p>The originating (or ingress) router puts the locator/IPv6 address of the first hop in the destination address of the normal IPv6 header. (And fills the SRH with all locators to traverse). Then the packet gets routed (via SRv6 speakers and/or non-SRv6 speakers) to the first hop. Like the IPv4 loose source routing option was supposed to work (before it was banned from real networks).</p>\n\n<p>When the packet reaches the first intermediate hop, that router will replace the destination address in the IPv6 header with the next locator from the list in the SRH. And sends the packet to the next hop in the SRv6-path. And so on.</p>\n\n<p>The SRH header containst a list of N IPv6 addresses for N intermediate hops. So if you send the packet across 5 hops, your SRH header will be 5 * 16 = 80 octets (plus 8 for the fixed size part of the SRH) = 88 octets. That&#39;s a lot of overhead.</p>\n\n<p>See: <br />\nhttps://datatracker.ietf.org/doc/html/rfc8754#name-segment-routing-header</p>\n\n<p>With uSIDs, you use a slightly different header format than the straight-forward SRH header. I think the SRH is still used. But in stead of holding N * 128 bits, it holds info in a smarter way. E.g. in my example above, I suggested we&#39;d carve all locators out of a /48 block. If you do that, you don&#39;t need to repeat that /48 in every SID. You&#39;d have a one-time &quot;Locator-block&quot; in the SRH. And then all SIDs don&#39;t need to mention/repeat those 48 bits. Similarly, if you use 16 bits to identifier a router, and 8 bits for the flex-algo number (or 0 for algo-0), then you still have 56 bits set to 0 in every locator. So you don&#39;t need to put those bits in the SRH either. (Unless you wanna put instructions&amp;arguments in those 56 bits). That&#39;s the idea. Of course there all these little details to make things more complex.</p>\n",
         "id": "2350",
         "name": "Henk  ",
         "pub": "2024-07-26T18:14:51",
         "type": "comment"
      }
   ],
   "count": 3,
   "type": "post",
   "url": "2024/07/bgp-evpn-vxlan-srv6.html"
}
