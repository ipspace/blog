{
   "comments": [
      {
         "date": "15 April 2021 10:45",
         "html": "<p>My bet for the elephant in the room is congestion delay. Using a congestion control mechanism that keeps buffer utilization (and thus buffer delay) low, such as Datacenter TCP, is probably much more relevant than having a low forwarding latency in the intermediate devices. For example, an average occupancy of 20 packets per input buffer increases latency by 24 &mu;s when using 10G, way larger than typical zero-load forwarding latency.</p>\n",
         "id": "520",
         "name": " Enrique Vallejo",
         "pub": "2021-04-15T10:45:13",
         "type": "comment"
      },
      {
         "date": "15 April 2021 10:52",
         "html": "<p>Buffering delay? Maybe packet size? Hard to guess the elephant.</p>\n\n<p>Some HFTs are looking at using LASERs in space. Speed of light in a vacuum is faster again :) </p>\n",
         "id": "521",
         "name": " James",
         "pub": "2021-04-15T10:52:22",
         "type": "comment"
      },
      {
         "date": "15 April 2021 12:45",
         "html": "<p>Perhaps elephant flows that delay reception of more latency sensitive mice flows</p>\n",
         "id": "522",
         "name": " Tim",
         "pub": "2021-04-15T12:45:51",
         "type": "comment"
      },
      {
         "date": "15 April 2021 09:15",
         "html": "<p>There is a really good Cisco Live from Lucien Avramov (BRKDCT-2214) about low latency networking with a few numbers and measurements. He also points out that network latency is way lower than middelware and application latency, which is probably where one should start instead of optimising a few nano-seconds on a switch.</p>\n",
         "id": "525",
         "name": " Jean-Baptiste",
         "pub": "2021-04-15T21:15:12",
         "type": "comment"
      },
      {
         "date": "15 April 2021 09:20",
         "html": "<p>I think the elephant is &quot;but how fast can you actually process the packets when you receive them?&quot; &#x1F642;</p>\n",
         "id": "526",
         "name": "Sander Steffann ",
         "pub": "2021-04-15T21:20:28",
         "type": "comment"
      },
      {
         "date": "15 April 2021 10:57",
         "html": "<p>Excellent article (you always find interesting topics).\nMy bet for the elephant will be QoS to lower the latency even further.</p>\n",
         "id": "527",
         "name": "Daniel Larsson",
         "pub": "2021-04-15T22:57:42",
         "type": "comment"
      },
      {
         "date": "16 April 2021 11:59",
         "html": "Great topic Ivan : ))! I found Cisco apparently manages to scale port-to-port latency down to 250ns for L3 switching, which is astonishing, and way less (sub 100ns) for L1 and L2, here (page 7):<br />\n\n<p>https://www.cisco.com/c/dam/en/us/products/collateral/switches/nexus-3550-series/esg-white-paper-ultralowlatency.pdf</p>\n\n<p>I don&#39;t know where FPGA fits into this ultra low-latency picture, because FPGA, compard to ASIC, is bigger, and a few times slower, due to the use of Lookup Table in place of gate arrays, and programmable interconnects. In any case, looking at their L2 and L1 numbers, it&#39;s too obvious the measurement was taken in zero-buffer and non-contentious situations. In the real world, with realistic heavily bursty, correlated traffic, they all perform way less than their ideal case. But regardless, L3 switching at 250ns even under ideal condition is highly impressive, given Trident couldn&#39;t achieve it in any of their testing scenarios. </p>\n\n<p>Again, I&#39;m not bashing Broadcom. It&#39;s just I find it laughable reading their apologies in their report you linked to, wrt how they don&#39;t &quot;optimize&quot; for 64-byte packets (love their wording), and how they manage to find a way to make their competitor finish far behind in the tests. Granted, Mellanox was trying the same thing in their test against Broadcom, so they&#39;re all even, and we should only take these so-called vendor-released testing reports with a grain of salt.</p>\n\n<p>The elephant in the room that you alluded to, is most likely endpoint latency. It&#39;s pretty irrelevant to talk about ns middlebox-latency when the endpoints operate in the ms range :p . And endpoint latency gets even worse when features like interrupt coalescing and LSO/GRO are in place. Must be part of the reason why the Cloud&#39;s performance for scientific apps sucks, and funny enough, they actually admit it as I found out recently. </p>\n\n<p>But IMO, that only means the server operating system, the hypervisor, the software switch etc, are the ones that need innovation and up their game, instead of using their pathetic latency figures as an excuse not to keep bettering routers&#39; and switches&#39; performance. Overlay model is notoriously slow because it&#39;s layer on top of layer (think BGP convergence vs IGP convergence), and as mentioned in your previous post, Fail fast is failing fast: &quot;If you live in a small town with a walking commute home, you can predictably walk in the front door at 6:23 every evening. As you move to the big city with elevators, parking garages, and freeways to traverse, it&#39;s harder to time your arrival precisely,&quot;  that kind of overburderned, complex architecture is not deterministic and no good for applications with real-time requirements. Infiniband shied away from TCP/IP for the same reason, and used a minimal-stack model to keep their latency low.</p>\n\n<p>The Cloud and their overlay model is a definitely a step backward in terms of progress. By doing it cheap, they make it slow. Good for their greedy shareholders, sucks for consumers who truly need the numbers. Well, I guess I can stop complaining now that bare-metal instances are a thing. But yeah, taken as a whole, basically echnology winter sems to continue. These days about the only kind of progress we have is corporate-PR progress. </p>\n\n<p>Speaking of HFT, there seems to be a lot of fanfare going on there when it was big some 10 yrs ago. FPGA was often mentioned as the way they sped up their end-to-end latency. But I ran across comments of some of the guys who actually did HFT for a living sometime back, and they said it&#39;s all hot-air, with most of the stuff they try to optimize being on the software level, such as doing away with message queuing (and so, safely getting rid of locks) to unburden their programs of concurrency synchronization, which is a big latency killers. Staying away from language that performs garbage collection is another thing, as there&#39;s no one-size-fit-all garbage collection algorithm that&#39;s optimized for all use case, and regardless, it&#39;s an additional layer compared to explicit memory management, and more layer means slower.</p>\n\n<p>From what I know of RenTech, one of the biggest if not the biggest HFT (they also do other algorithmic trading besides HFT), they rely on software with big-data models, not fancy hardware. </p>\n",
         "id": "529",
         "name": "Minh Ha",
         "pub": "2021-04-16T11:59:19",
         "type": "comment"
      },
      {
         "date": "17 April 2021 09:08",
         "html": "<p>Yet another true gem from Ivan - Thanks ever so much   </p>\n\n<p>I guess the Elephant is TCP and the correct router buffer sizing. Too small and you get drops and thus retransmission and thus delay, too big and you get the bufferbloat phenomenon and thus delay again. Having said that, you need to buffer if you are not fast enough at switching and/or if your chipset design is crap (e.g. use of external memory for lookups) and thus perhaps this might be an elephant too ?    </p>\n\n<p>Just one last thing on buffer sizing in a SP environment. I also hope to engage Minh Ha on this as I know he&#39;s passionate about this subject too (he once wrote about selfsimilarity of internet traffic) but maybe on another post of Ivan - Ivan permitting of course ;)!!! <br />\nI found this paper &quot;https://www.semanticscholar.org/paper/Internet-Traffic-is-not-Self-Similar-at-Timescales-Telkamp-Maghbouleh/6ca16fcd9959eb1bca89a52be63bf5cfbb3fcc00&quot; cited at CiscoLive and also associated to multicast and video transport that is my major area of interest as we speak. The CiscoLive PPT is this one @ https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2015/pdf/BRKSPV-1919.pdf <br />\nBasically the Telkamp&#39;s paper is a theoretical paper and states that Internet Traffic is not SelfSimilar @ timescales relevant to QoS. This means that it is instead markovian and thus not bursty at timescale that really counts. <br />\nI also found though a pretty recent empirical paper from AT&amp;T Labs that managed (not an easy task at all) to look into real Internet backbone traffic @ very small scale (relevant to router QoS and thus @ ms grain) that observed that real internet traffic is instead indeed self-similar and thus bursty even at ms level. <br />\nThe AT&amp;T lab paper is @ http://buffer-workshop.stanford.edu/papers/paper18.pdf       </p>\n\n<p>Would love to know what your take is on this pretty complex but tremendously important subject. Hope I haven&#39;t derailed too much from the main topic as DC traffic is totally different from SP traffic...unless you do ..... Telco Cloud  :) ?  In that case I hope it can be treated separately in a different post maybe - Ivan permitting of course !!    </p>\n\n<p>Cheers/Ciao <br />\nAndrea    </p>\n",
         "id": "533",
         "name": "andrea di donato",
         "pub": "2021-04-17T09:08:23",
         "type": "comment"
      },
      {
         "date": "19 April 2021 10:33",
         "html": "<p>Hi Andrea,</p>\n\n<p>I cannot get access to the paper as only its abstract is available. Nevermind :)). Self-similarity/long-range dependency of traffic arrival, like almost everything else in the grand scheme of Internetworking, should be treated with a big-picture perspective. So basically if someone tries hard enough, they can prove that at a certain timescale, the traffic is not self-similar, or not that self-similar, you know, with some mathematical twists and &quot;proved theorems&quot; ;). Not that it changes the true nature of things, i.e. Internet traffic is still bursty on many timescales, as proven by microburst for the fine-grain level, and so, due to this many-timescale burstiness, using big buffer as a form of low-pass filter to smooth out traffic, doesn&#39;t work most of the time. It can increase throughput, but may not goodput (due to loss and retransmission), and at the cost of considerable latency. Not good.</p>\n\n<p>Also, a lot of switch-scheduling algorithms work well with uniform traffic, but their performance starts to degrade when bursty models like self-similarity is used. Add to that multicast traffic when enabled, and optimum switch-fabric scheduling is still an open problem. That&#39;s why building a high-end router is a lot more than just writing some network OS and sticking it on top of off-the-shelf hardware, hoping for the best. And that&#39;s why I commented above, that the Cloud is a step-back in terms of progress, with their commodity-based network. Not that it matters, we&#39;re in the midst of a technology winter anyway, with scams like Quantum Computing and AI being hailed left and right as the saviours of the day ;).</p>\n\n<p>So in a word, instead of trying to dispute the fact that Internet traffic is bursty on many levels, and use that as an excuse to justify their under-performing equipment, researchers and vendors would do better to face facts, and work hard to create products that work best for worst-case scenarios, as that&#39;s how routers were originally bench-marked anyway. Good, high-performance products never go out of style.</p>\n\n<p>Back to our topic, for DC environment, when the RTT is in the low us, point-solutions like DC-TCP along with intelligent load balancing (flowlet, or even better, packet-level ECMP) can be used to both improve delay and throughput, plus negate the necessity of big buffer. Solutions like this are not viable in the Internet due to bigger delay and jitter, causing reordering and serious performance degradation.</p>\n\n<p>For Telco/carrier Cloud environments, where NFVs (which are much slower than hardware SGW) get used a lot, latency is higher with a lot of jitter due to the nature of software and the varying link speeds, so DC-level near-zero buffer is not applicable. But all the same, very big buffer causes a lot of trouble there too. You might like this paper that discusses this particular issue:</p>\n\n<p>http://lig-membres.imag.fr/heusse/WirelessNet/Papers/2012Jiang.pdf</p>\n\n<p>A few years ago, Codel was proposed as the solution for bufferbloat in Internet/SP environment, and was highly touted. But with all of its fanfare, it&#39;s not without its weaknesses (like everything else) and its superiority against good old RED was challenged here:</p>\n\n<p>https://core.ac.uk/download/pdf/33663637.pdf</p>\n\n<p>In the end, I think there&#39;s no substitute for a good hardware and an over-provisioned network if you want to guarantee SLA, esp. for rainy days. If you have to live with a mix of legacy equipment whose performance lacks the rest of the fleet, you can use some tricks like bigger buffer to work around that, but it&#39;s a band-aid, not a solution.</p>\n",
         "id": "535",
         "name": "Minh Ha",
         "pub": "2021-04-19T10:33:13",
         "type": "comment"
      },
      {
         "date": "22 April 2021 08:39",
         "html": "<p>Hello Minh !     </p>\n\n<p>Thanks for your priceless reply  </p>\n\n<p>This link should work for the paper cited by Cisco: <br />\nhttps://www.researchgate.net/profile/V_Sharma4/publication/266463879_Internet_Traffic_is_not_Self-Similar_at_Timescales_Relevant_to_Quality_of_Service/links/55b1ede708aed621ddfd6fae/Internet-Traffic-is-not-Self-Similar-at-Timescales-Relevant-to-Quality-of-Service.pdf?origin=publication_detail     </p>\n\n<p>My point was that regardless of what Cisco cited as a paper, traffic is indeed self-similar (i.e. bursty) even at ms/QoS grain and it is self-similar even at the backbone level (which is telling me that the low pass filtering implemented at the Edge boxes with big buffers does not smooth traffic towards the backbone in the end) as AT&amp;T Lab&#39;s paper (http://buffer-workshop.stanford.edu/papers/paper18.pdf) proved by measuring it on their production network (not an easy task), then surely shallow buffers do not work in backbone routers. Huge buffers do not work either due to the bufferbloat phenomenon. So, it looks like there&#39;s no an easy recipe really in backbone networks.           </p>\n\n<p>Cheers/Ciao <br />\nAndrea      </p>\n",
         "id": "547",
         "name": " andrea di donato",
         "pub": "2021-04-22T08:39:13",
         "type": "comment"
      },
      {
         "date": "23 April 2021 11:25",
         "html": "<p>Hi Andrea,</p>\n\n<p>Thx for providing the link. I&#39;ve had a read thru it. Basically in that paper, they intentionally targeted the timescale not present in the original and seminal work of Leland et al, and came up with the conclusion that the traffic pattern wasn&rsquo;t self-similar/fractal, at the low ms range. But they measured it over 1 link only, and then made some inference over the limited data obtained. Seriously, I had to suspect if this paper was a rushed attempt to make up a justification for Diffserv. Given the time period (2004) and with the benefit of hindsight, it&#39;s most likely the case, as around this period Diffserv was emerging as a viable answer to the false promise of Intserv. The paper&rsquo;s analysis was shallow, and from what was presented, I had to sa, that the authors&#39; understanding of the implications of self-similarity was insufficient, for them to draw informed conclusions out of it. </p>\n\n<p>No wonder the AT&amp;T empirical paper, which came out much later, and at a time when Internet traffic contained a lot more vid content than 2004 -- youtube came to be in 2005, Netflix and others much later -- refuted the finding of the former. Video traffic was proven to be self-similar in nature, and Broadcom also mentioned that in their presentation. It&#39;s pretty well-known. </p>\n\n<p>What the paper you linked failed to realize, is that self-similarity&#39;s implication has a lot to do with whether more buffer or more bandwidth, is needed to deal with Internet traffic congestion. The quick answer is, more bandwidth is the way to go, aka throwing bandwidth at the problem. With Poisson/Markovian traffic, which is short-range dependent, queue sizes decrease pretty quickly, therefore as does congestion, so big buffer can be used to temporarily hold the congested traffic, to wait it out. Not so with self-similar traffic. This is a direct quote from Leland&#39;s empirical paper, &quot;on the self-similarity of Ethernet traffic&quot;:</p>\n\n<p>&quot;In particular, overallpacket loss decreases very slowly with increasing buffer capacity, in sharp contrast to Poisson-based models where losses decrease exponentially fast with increasing buffer size. Moreover, packet delay always increases with buffer capacity, again in contrast to the formal models where delay does not exceed a fixed limit regardless of buffer size. This distinctive loss and delay behavior can be precisely explained in terms of the frequency domain manifestation of self-similarity (see Section 3.2). Because both low and high frequencies are significant, heavy losses and long delays occur during long time-frame bursts (due to the presence of low frequencies) and can, therefore, not be dealt with effectively by larger buffers.&quot;</p>\n\n<p>See, with self-similar traffic, intuitively, one can see that when congestion happens, queuing delay will decrease very slowly, regardless of buffer size, due to the significance of the low-frequency part of traffic arrival. The low-frequency part of arrived traffic matters, because self-similar traffic is long-range dependent (LRD). Low-frequency component of traffic matters not in Poisson/Markovian traffic because it&#39;s short-term dependent, in other words there&#39;s no correlation of patterns over a long range of time scales. The correlation over large timescales of self-similar traffic, is exactly why the use of big buffer as a form of low-pass filter is mostly useless, and will increase delay exponentially as queue size gets longer and longer under congestion.</p>\n\n<p>So to deal with self-similar traffic more effectively, increase the available bandwidth if possible (over-provisioning), have routers with powerful packet-processing capability, and pay attention to admission control/back-pressure, all with the goal of avoiding congestion. Because the nasty effect of self-similarity comes in when there&rsquo;s some form of congestion, which can happen due to link failure/maintenance, hot-potato routing changes, DDOS etc. </p>\n\n<p>Leland&#39;s empirical work (traffic measurements taken over 4 yrs in Bellcore network) brought to light the fractal nature of LAN traffic, and after further work was carried out in that direction, WAN and Internet traffics were also found out to exhibit LRD/self-similarity. And in DCs these days, microburst is an example of self-similarity at sub-ms timescale. Again, big buffer has been shown to be ineffective against microburst, with proactive schemes like DC-TCP being much better alternatives. In DC environment, features like Interrupt coalescing, TSO, GRO, definitely contribute to self-similarity because they create ON-OFF traffic patterns, with infinite variations in timeframe the bigger the DC and the more traffic sources you have.</p>\n\n<p>There&rsquo;s a proposed solution that&rsquo;s originally intended to address the latency issue in DC, but from what I can see, equally applies to alleviating self-similarity consequences in SP backbone as a result of congestion, here:</p>\n\n<p>https://people.csail.mit.edu/alizadeh/papers/hull-nsdi12.pdf</p>\n\n<p>This work, which involves Cisco, suggests the use of Phantom Queue as a form of link utilization monitoring. So when the phantom queue is full, which is a bit less than 100% of the actual link, action is taken. In the paper, this was in the form of DC-TCP&rsquo;s ECN marking, but it can be other things as well. The reason I bring it up is because I think this solution has values (and might be available in some Cisco platforms), unlike lots of other papers that get written for self-promotion or for securing tenure, with no useful practicality whatsoever. </p>\n\n<p>Since you are in SP/carrier sector, you can convey this idea to your peers. If enough interest is generated, resulting in further work being done in this direction by research groups, industrial or academic, that study backbone traffic conditions as an engineering topic, then maybe better networking products can be created down the road at some point.</p>\n\n<p>Cheers\nMinh</p>\n",
         "id": "552",
         "name": "Minh Ha",
         "pub": "2021-04-23T11:25:50",
         "type": "comment"
      },
      {
         "date": "26 April 2021 08:47",
         "html": "<p>Hello Minh,   </p>\n\n<p>Thanks for your always valuable contribution. I investigated a bit more and I actually found out that any references to internet traffic being markovian at ms grain/scale that was present in the 2014 version of the Cisco Live PPT was removed in the 2017 version. Here&#39;s the two versions.. <br />\nhttps://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2015/pdf/BRKSPV-1919.pdf <br />\nhttps://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2017/pdf/BRKSPV-2919.pdf <br />\nIn particular, it was removed the reference to this cariden PPT: <br />\nhttps://dokumen.tips/documents/013-telkamp-how-full-is-full.html    </p>\n\n<p>Apart from these  annoyingly cisco-disseminated  red herrings...the message from Cisco is that VoIP and mcast IPTV are markovian and thus not bursty - fair enough.    </p>\n\n<p>The idea Minh is exactly what you envisaged and thus that of conveying to my SP peers this approach of avoiding congestion/queuing at all costs as there&#39;s no other recipe for self-similar traffic.  So, the right amount of overprovisioning, a well-designed forwarding chipset with proper QoS too and definitely not shallow buffers and not huge buffers as the Leland/Wittinger paper you mentioned clearly highlights. <br />\nHaving said that, I am currently more focused on transporting multicast which is a different beast and has its own challenges, with one of them being that of having to be transported by the same ip infrastructure as the self-similar unicast traffic  ...   </p>\n\n<p>Cheers/Ciao <br />\nAndrea  </p>\n",
         "id": "557",
         "name": " andrea di donato",
         "pub": "2021-04-26T20:47:42",
         "type": "comment"
      },
      {
         "date": "08 June 2021 03:52",
         "html": "<p>@Jean-Baptiste \nCould you please share the link to &quot;Cisco Live from Lucien Avramov (BRKDCT-2214)&quot;</p>\n\n<p>I can&#39;t find it.</p>\n\n<p>Thank you</p>\n",
         "id": "642",
         "name": "Judith Tindo",
         "pub": "2021-06-08T15:52:07",
         "type": "comment"
      },
      {
         "date": "31 July 2021 04:45",
         "html": "<p>Hi Ivan,\nThanks for this great content.</p>\n\n<p>Please allow me to share a pointer to this recent survey about how the one-way delay is measured in traditional IP networks and in SDN. It covers 30 research works and standards that do so in passive and active ways. It also does some analysis, comparison (w.r.t to coverage, granularity, cost, accuracy &amp; resilience to packet loss, re-ordering and duplication) and discussion about open issues such as controller based network wide delay measurements in SDN in the sub-millisecond realm.</p>\n\n<p>[ACM paywall] https://dl.acm.org/doi/10.1145/3466167</p>\n\n<p>Disclaimer: I am the author :-), but not the copyright holder! </p>\n",
         "id": "714",
         "name": " Djalel Chefrour",
         "pub": "2021-07-31T16:45:28",
         "type": "comment"
      }
   ],
   "count": 14,
   "type": "post",
   "url": "2021/04/switching-latency-relevant.html"
}
