{
  "comments": [
    {
      "comments": [
        {
          "date": "23 April 2019 19:30",
          "html": "I used a NoSQL database in a niche problem that had relatively loose data structure (so I didn&#39;t want to have a table with dozens of columns, most of them having NULL values) and regretted it ever since ;)<br /><br />As always, the real questions are &quot;what do you want to get done&quot;, &quot;how hard would it be to do with tools I already know&quot; and finally &quot;is it worth investing into yet-another tool&quot;. In my case, the answer was NO (and I was stupid enough to learn it the hard way).<br /><br />In this particular case, you should start with &quot;why do I want to store return values of various playbooks&quot; and then &quot;what will I do with that data&quot;... and it might turn out that what you need is a time-series database, or ElasticSearch, or maybe just a bunch of text files (in case you need the return values for logging/auditing/troubleshooting reasons).<br /><br />Good luck with your project!<br />Ivan",
          "id": "432476884938415805",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Ivan Pepelnjak",
          "profile": "https://www.blogger.com/profile/13457151406311272386",
          "pub": "2019-04-23T19:30:56.981+02:00",
          "ref": "1248057412106815445",
          "type": "comment"
        }
      ],
      "date": "23 April 2019 10:51",
      "html": "What do you think about NoSQL databases? Their flexibility might come handy when storing return values of various playbooks.",
      "id": "1248057412106815445",
      "image": "https://4.bp.blogspot.com/-ZOXsPp2jWZM/WLFLiMZondI/AAAAAAAADJ4/Ut7WBaNvJIInOF_9feWqAIeZiw3nyuEmwCK4B/s32/en2.jpg",
      "name": "Andras Dosztal",
      "profile": "https://www.blogger.com/profile/04707560608698340062",
      "pub": "2019-04-23T10:51:04.326+02:00",
      "ref": "9014059626898165952",
      "type": "comment"
    },
    {
      "date": "29 April 2019 13:26",
      "html": "We have spoke about this on twitter as well, but I think one of the biggest things to consider in what GIT gives you in terms of integrations with CI/CD, peer review, and allowing data to live in &quot;purgatory.&quot; Meaning, your SoT should represent your current state, if you update the state today, but do not plan to push until next change window, now they are out of sync. Your data will always be out of sync then.<br /><br />Replicating the same controls in a DB is not easy, and the UI for GIT integrations is not pleasant. As always, it depends :) ",
      "id": "168146669069858826",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Unknown",
      "profile": "https://www.blogger.com/profile/11092874405740802134",
      "pub": "2019-04-29T13:26:30.382+02:00",
      "ref": "9014059626898165952",
      "type": "comment"
    }
  ],
  "count": 3,
  "id": "9014059626898165952",
  "type": "post",
  "url": "2019/04/text-files-or-relational-database.html"
}