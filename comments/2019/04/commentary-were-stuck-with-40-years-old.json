{
  "comments": [
    {
      "comments": [
        {
          "date": "01 May 2019 09:33",
          "html": "At the ingress node it\u2019s always routing even if the ingress node is a web proxy server (the approach used by large content providers). Whether you do hop-by-hop routing decision or insert path information (label) into the packet is another story.",
          "id": "8513827785783290773",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Ivan Pepelnjak",
          "profile": "https://www.blogger.com/profile/13457151406311272386",
          "pub": "2019-05-01T09:33:59.128+02:00",
          "ref": "3601736472622172702",
          "type": "comment"
        }
      ],
      "date": "30 April 2019 10:21",
      "html": "Routing or label switching?",
      "id": "3601736472622172702",
      "image": "https://2.bp.blogspot.com/-hwvTR2UGngM/XIThML0bLJI/AAAAAAAAAHs/KQAKCSF3hDkUZGhNpVFkHQx8dCrQJy2cACK4BGAYYCw/s32/1_Amastelek_Image_Main_Colour.png",
      "name": "Amastelek Technologies",
      "profile": "https://www.blogger.com/profile/01516467255777865408",
      "pub": "2019-04-30T10:21:14.394+02:00",
      "ref": "2462177948783633078",
      "type": "comment"
    },
    {
      "comments": [
        {
          "date": "01 May 2019 09:32",
          "html": "Fixed. Thank you!",
          "id": "65852127496150488",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Ivan Pepelnjak",
          "profile": "https://www.blogger.com/profile/13457151406311272386",
          "pub": "2019-05-01T09:32:38.450+02:00",
          "ref": "4223418821983434476",
          "type": "comment"
        }
      ],
      "date": "30 April 2019 12:02",
      "html": "I think you meant BPDU Guard feature. Root Guard feature is a different use case.",
      "id": "4223418821983434476",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Anonymous",
      "profile": "https://www.blogger.com/profile/17892204563666956100",
      "pub": "2019-04-30T12:02:34.469+02:00",
      "ref": "2462177948783633078",
      "type": "comment"
    },
    {
      "comments": [
        {
          "date": "01 May 2019 09:26",
          "html": "Summarization = abstracting address information, making multiple endpoints reachable through a single forwarding entry<br /><br />Conversation learning = cache-based forwarding - install forwarding entry from control plane into data plane only when needed.<br /><br />Unfortunately, every single cache-based forwarding scheme I\u2019ve seen eventually falls apart when faced with cache trashing or cache overflow. Conversational learning is no exception, as people who tried to use SVIs on F2 linecards quickly figured out.<br /><br />As for \u201cthey work no matter how they are twisted\u201d, I\u2019m positive anyone experiencing a meltdown after a bridging loop would tend to disagree.",
          "id": "3657654629482158244",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Ivan Pepelnjak",
          "profile": "https://www.blogger.com/profile/13457151406311272386",
          "pub": "2019-05-01T09:26:36.349+02:00",
          "ref": "9077727909079500671",
          "type": "comment"
        },
        {
          "date": "03 May 2019 17:33",
          "html": "Apologies on my lack of context \u201cthey work no matter how they are twisted\u201d. I wasn&#39;t referring to meltdowns from twisted use I meant the fact that these protocols have lasted so long, still in use working as intended predictably as designed, still in our toolbox, for we haven&#39;t developed(sadly by now) the &quot;be all protocol&quot; over any medium to date that fixes everything we encountered using our old tools to manage the applications above them. But then again I recall some great posts by you and the gang here about topics covering fixing the applications too. ",
          "id": "2371082949688460325",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "jsicuran",
          "profile": "https://www.blogger.com/profile/07267516785767923381",
          "pub": "2019-05-03T17:33:10.528+02:00",
          "ref": "9077727909079500671",
          "type": "comment"
        }
      ],
      "date": "30 April 2019 20:20",
      "html": "Well Fabricpath did have a form of summerization -(conversation learning in the core switches)<br />Had Cisco went a little further with the Fabricpath  packet construct and use of end node id field they could have been on to something.  <br /><br />But hey, for those 80s protocols isn&#39;t this a testament to the hardiness of these 40 year old protocols? They work no matter how they are twisted. ",
      "id": "9077727909079500671",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "jsicuran",
      "profile": "https://www.blogger.com/profile/07267516785767923381",
      "pub": "2019-04-30T20:20:28.171+02:00",
      "ref": "2462177948783633078",
      "type": "comment"
    },
    {
      "date": "02 May 2019 07:53",
      "html": "Regarding manufacturer-specific loop detection mechanisms, Nortel/Avaya/Extreme had a protocol called Simple Loop Prevention Protocol (SLPP) that was moderately tunable.  I&#39;m pretty far removed from that world now and have no idea if it&#39;s still in production or not, but it&#39;s at least available on older Nortel and Avaya ERS switches.  Michael F. McNamara wrote a blog post about it here:<br /><br />https://blog.michaelfmcnamara.com/2007/12/simple-loop-prevention-protocol-slpp/",
      "id": "2777225734129722827",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Avery Abbott",
      "profile": "https://www.blogger.com/profile/02172854860991897596",
      "pub": "2019-05-02T07:53:21.387+02:00",
      "ref": "2462177948783633078",
      "type": "comment"
    },
    {
      "comments": [
        {
          "date": "03 May 2019 17:20",
          "html": "REP wow I remember that. I recall a cisco data sheet on that back in mid 00s curious if anyone used it. Thanks for bringing that back up.",
          "id": "7016487222890430800",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "jsicuran",
          "profile": "https://www.blogger.com/profile/07267516785767923381",
          "pub": "2019-05-03T17:20:40.780+02:00",
          "ref": "1011662543042005804",
          "type": "comment"
        }
      ],
      "date": "02 May 2019 07:58",
      "html": "There are also other loop detection/prevention mechanisms available depending on what topology you have, such as Cisco&#39;s Resilient Ethernet Protocol (REP), HP&#39;s Rapid Ring Protection Protocol (RRPP), and other vendors&#39; similar offerings built for ring topologies.<br /><br />The overly simplified explanation of REP (and I believe RRPP functions similarly) is that you specify a link to keep in a blocking state, then all the other switches send eachother keepalives on their ring ports.  When a break is detected, an emergency message is sent around the ring to bring that blocked link from before into a forwarding state.",
      "id": "1011662543042005804",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Avery Abbott",
      "profile": "https://www.blogger.com/profile/02172854860991897596",
      "pub": "2019-05-02T07:58:53.363+02:00",
      "ref": "2462177948783633078",
      "type": "comment"
    },
    {
      "date": "30 May 2019 13:05",
      "html": "The whole networking industry got it very wrong with the VXLAN technology, that was one of the industry&#39;s biggest blunders. <br />The VXLAN project of DC folks is a good example of short sighted goals and desire to reinvent the wheel (SP folks had VPLS around for years when VXLAN came to be).<br />SP folks then came up with EVPN as a replacement for VPLS and DC folks then shoehorned it on top of VXLAN.<br />Then micro-segmentation buzzword came along and DC folks quickly realized that there&#39;s no field in the VXLAN header to indicate common access group nor the ability to stack VXLAN headers on top of each other (or some tried with custom VXLAN spin offs) so DC folks came up with a brilliant idea -let&#39;s maintain access lists! -like it&#39;s 90&#39;s again. As an SP guy I&#39;m just shaking my head thinking did these guys ever heard of L2-VPNs which were around since inception of MPLS? (obviously not telling people about mac addresses they should not be talking to is better than telling everyone and then maintaining ACLs) in SP sector we learned that in the 90s. <br />Oh and then there&#39;s the Traffic-Engineering requirement to route mice flows around elephant flows in the DC, not mentioning the ability to seamlessly steer traffic flows right from VMs through DC borders and the across MPLS core which is impossible with VXLAN islands in form of DCs hanging off of MPLS core. <br />With regards to the MAC aggregation point, PBB-EVPN\u2026 <br />So there you have it, all the challenges DC folks are trying to solve with half-baked solutions have already been solved years ago in the SP sector. ",
      "id": "7085289040116836805",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "adam",
      "profile": "https://www.blogger.com/profile/12239884963292610210",
      "pub": "2019-05-30T13:05:42.274+02:00",
      "ref": "2462177948783633078",
      "type": "comment"
    }
  ],
  "count": 11,
  "id": "2462177948783633078",
  "type": "post",
  "url": "2019/04/commentary-were-stuck-with-40-years-old.html"
}