{
  "comments": [
    {
      "comments": [
        {
          "date": "31 March 2018 08:08",
          "html": "any link to the previous incarnation of the idea then? RPL is somewhat but very remotely related only. RIFT leans of course on many pieces that are well understood over years like ISIS-like-flooding &amp; will possibly pickup a thing from OLSR but many things like automatic dis-aggregation are AFAIK genuinely spanking new ... Steal &amp; borrow where you can and focus on solving the genuinely needed never-been-done pieces only ;-) ",
          "id": "565330476264473568",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Tony P",
          "profile": "https://www.blogger.com/profile/07732539097585801151",
          "pub": "2018-03-31T08:08:31.753+02:00",
          "ref": "6595985896187836395",
          "type": "comment"
        },
        {
          "date": "31 March 2018 13:05",
          "html": "I asked a polar question but you answered with a counter question. So based on your explanation I guess now that rule 11 from RFC 1925 is applicable to RIFT.",
          "id": "1665695059345987845",
          "image": "https://resources.blogblog.com/img/blank.gif",
          "name": "Anonymous",
          "profile": null,
          "pub": "2018-03-31T13:05:41.391+02:00",
          "ref": "6595985896187836395",
          "type": "comment"
        }
      ],
      "date": "30 March 2018 23:03",
      "html": "Is rule 11 from RFC 1925 applicable to RIFT?",
      "id": "6595985896187836395",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Anonymous",
      "profile": null,
      "pub": "2018-03-30T23:03:10.937+02:00",
      "ref": "3487228703911998255",
      "type": "comment"
    },
    {
      "date": "31 March 2018 18:13",
      "html": "I don&#39;t think so. In my opinion RIFT matches rule 5 of RFC 1925.",
      "id": "9030651356000079085",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Anonymous",
      "profile": null,
      "pub": "2018-03-31T18:13:52.774+02:00",
      "ref": "3487228703911998255",
      "type": "comment"
    },
    {
      "comments": [
        {
          "date": "04 April 2018 23:06",
          "html": "Hey Petr, we just released a binary package to give people a chance to play with the implementation<br /><br />https://www.juniper.net/us/en/dm/free-rift-trial/ <br /><br />We hope it will lead to experimentation/feedback/demand/open-source attempts and detract a bit from the marketing and assumption-based discussions around things as of now ... And yes, open sourcing is a business decision which is not driven by techies and depend on many things. <br /><br />As to the chances of adoption, the properties of the protocol will speak for itself and with mild tongue in cheek let me quote B. Shaw: &quot;The reasonable man adapts himself to the world: the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.&quot; I made a career of being the unreasonable man ;-)<br /><br />Look me up anytime for lunch in the Valley to exchange ideas ;-)  ",
          "id": "6479500974264787588",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Tony P",
          "profile": "https://www.blogger.com/profile/07732539097585801151",
          "pub": "2018-04-04T23:06:48.902+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        },
        {
          "date": "05 April 2018 09:01",
          "html": "Don&#39;t beat around the bush. To me Petr&#39;s request was very clear. So will RIFT be open sourced? If you don&#39;t open source RIFT, it will be a non-starter.",
          "id": "1223452713137813083",
          "image": "https://resources.blogblog.com/img/blank.gif",
          "name": "Anonymous",
          "profile": null,
          "pub": "2018-04-05T09:01:57.617+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        },
        {
          "date": "05 April 2018 19:09",
          "html": "I believe that wide adoption is hardly possible without multiple, interoperating, and decent quality implementations. This is on top of benefits that people would gain with new protocol. <br /><br />For example, on the BGP story: when we tried using OSPF, we hit multiple issues in different vendors&#39; implementations. BGP just happened to be there and was implemented better, so we moved along with it, adapting the design. If, ISIS would have happened to be there across few vendors, things might have been very different. <br /><br />I totally understand that open-sourcing is not something you can solely decide on. I liked the Contrail approach, however ;)",
          "id": "3789602823282184842",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Unknown",
          "profile": "https://www.blogger.com/profile/09023765657674084072",
          "pub": "2018-04-05T19:09:53.557+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        },
        {
          "date": "05 April 2018 20:39",
          "html": "Petr, yepp, I read you loud and clear. Let me ruminate just a bit (in multiple parts, I blew the 4096 characters ;-)<br /><br />I fully understand the OTT/hyperscaler situation and acknowledged fully in the podcast that IMO BGP happened for OTTs in a good part because there was better open source around (and BGP is easier to hack without breaking stuff ;-). And OTTs can pay the OPEX right now, point. And link-states are harder to build &amp; generally open source is so ho-hum only. However, they have nice properties and Open/R speaks for itself I guess ;-) And I don&#39;t hide the fact that some of the RIFT stuff was clearly inspired by the thinking/work you guys did there, it was a great thing someone who wasn&#39;t steeped in the 30 years of OSPF/ISIS dogma took a really fresh, hard look ;-)<br /><br />And seriously, I understand the open-source angle but here&#39;s a bunch observations from long, long, long experience where I helped tons open source things &amp; hacked on some &amp; saw very few succeed (Linux was notable, I happened to hide guys in IBM research and funnel money their way while they were skunking towards 0.9 version which was quite a no/no then ;-), Python, Django being another). For each of those  you have 10&#39;000s of abandoned low-quality construction pits and uncontrolled catfights like KVM vs. GNOME. <br /><br />a) So after years and years of &quot;open source&quot; we still don&#39;t have a really good link-state open source as you say. Reasons are manifold, one of them that scaling up link-state is really hard work people are not willing to do without making a living (and even if you try to explain to them how things need to be done to scale you end up being dismissed as irrelevant often, I have been down that curve, judged it a waste of time largely to be honest). And then it needs hard testing (testing costs tons of money as you know and no&#39;one in open source is much excited about that one).<br /><br />",
          "id": "4877618483800036386",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Tony P",
          "profile": "https://www.blogger.com/profile/07732539097585801151",
          "pub": "2018-04-05T20:39:49.913+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        },
        {
          "date": "05 April 2018 20:39",
          "html": "b) Multiple interop&#39;ing implementations of routing protocols can happen without open source (we have 30 years of interoperable IETF routing protocols, mostly done by vendors long before open source was anything but Emacs and sendmail ;-), the really pivotal point is quality of the RFC and community, we&#39;re herding cats to get a good spec and get serious clue helping out with it. I think e.g. that model based packet formats will take lots of fragility/interop problems out of building RIFT and I&#39;m pushing on multiple fronts to bring IETF protocol building closer to how software is done today. I understand the release cycles stuff had is not what OTTs today are looking for and RIFT is one attempt to help us coping with this problem.  <br />c) Open source tends to attract attention and then too much of it only after something is &quot;hot&quot;. RIFT is not &quot;hot&quot; so I doubt I&#39;ll get tons of clueful, listening people willing to do the very hard work I would ask them to do (but I will of course get a lot of &quot;opinions&quot; ;-), lots of that work counter-intuitive but in case JNPR RIFT code goes open source we&#39;ll see how it plays out. Largely out my hand as I say being a techie and all and I&#39;m kind of agnostic really. <br />d) most important: leaf version is trivial and it was done very intentionally that way. RIFT allows to build a server/ToR version which is relatively simple (no southbound @ all, no disaggregation, only default route really &amp; so on). To the point it can be probably done in python ;-) There&#39;s tons of open source opportunity there which is however a different thing than &quot;free lunch&quot; ;-) BTW, I actually seen someone skunking something in one of the new half-scripting languages already but that petered out (as so often with open source, people get real jobs, loose interest, die on first hard hill &amp; then you&#39;re left with an open construction pit on github ;-)<br />e) even most important: if you play with the package we released you can trivially hook-up your implementation to it and interop, that&#39;s one of the main points of supporting that effort. <br /><br />So, in short, yeah, what we have may go open source, it may not, I doubt this is as important as you seem to think it is, someone with time &amp; dedication can get stuff going quickly by himself and we provide public package with a framework where interop testing of the control part against our stuff is trivial. If you run the package I released you see that you can converge a 30 or so switch CLOs with couple hundred prefixes in a second or so and look @ all the state.  <br /><br />Like I said, more of that best served with whiteboard and lunch ... <br />",
          "id": "8476634937097858837",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Tony P",
          "profile": "https://www.blogger.com/profile/07732539097585801151",
          "pub": "2018-04-05T20:39:57.809+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        },
        {
          "date": "06 April 2018 15:48",
          "html": "I see OSS&#39;ing both as a marketing move and as a way to inject high quality &quot;seed&quot; implementation, which, as you mentioned, would be hard to bootstrap otherwise.  This increases chances of adoption, and piques interest of other vendors toward build their own implementation (or adopting existing OSS one).<br /><br />For example, take Arista, which has gained very strong footprint in DC. If you happened to have a quality OSS version, porting it to EOS would be trivial, and for Arista support cost would be just fixing possible SDK issues (though it&#39;s pretty stable now, albeit 32-bit). If some curious individual would write their RIFT implementation in scripting language (I did write bgp in python some time ago to bootstrap some things), the quality of said code is not likely be good enough for anyone to continue playing with.<br /><br />Additionally, let&#39;s imagine the RFC has been finalized (indeed, I find it well written, and not causing dizziness, unlike OSPF&#39;s). The incentive for someone else to build their own high-quality implementation would be still low, unless the new protocol offers amazing wins, that surpass by far any other routing protocol in existence (which, as we know, is unlikely possible). <br /><br />And yes, let&#39;s meet up if you want to discuss routing and things :) ",
          "id": "4230418544877064028",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Unknown",
          "profile": "https://www.blogger.com/profile/09023765657674084072",
          "pub": "2018-04-06T15:48:18.127+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        },
        {
          "date": "06 April 2018 16:19",
          "html": "Agreed with your take ;-) <br /><br />I do however think that RIFT implementations will materialize due to the OPEX pressure on building fabrics/DCs I see everywhere except top 7 OTT frankly, otherwise I wouldn&#39;t have spent the time on spec&#39;ing it. If my assumption that &quot;CLOS fabric is the new RAM chip for bandwidth&quot; is wrong adoption will be lower. If DC fabrics move to something massively different than CLOs then new game will be afoot, the math plays for me and money burnt on hypercubes/torroidals that never delivered ;-) but massive amounts of money trying to find something better try to think whether a whole DC cannot be made a NUMA or even pure optical switching, I know ;-)  &quot;Plus ca change, plus ca reste meme&quot; however ;-) <br /><br />As to IETF/open-source, importance of it and so on, the 2nd most successful ever protocol to be deployed I think was EIGRP so that&#39;s a funny angle to think through. <br /><br />Pinged you on LinkedIn, if you willing let&#39;s move that to some nice food &amp; beer venue and exchange couple angles I don&#39;t want to spell out necessarily on this blog ;-) <br /><br /><br /><br /><br /><br />",
          "id": "1208375385608483898",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Tony P",
          "profile": "https://www.blogger.com/profile/07732539097585801151",
          "pub": "2018-04-06T16:19:31.722+02:00",
          "ref": "2515581172097848576",
          "type": "comment"
        }
      ],
      "date": "31 March 2018 19:22",
      "html": "It would be super helpful to have RIFT&#39;s reference implementation open-sourced by Juniper (as I believe it to be high-quality). Otherwise, I feel the chances of getting wider adoption might be slim. I know it&#39;s a business decision in the end, but still :)",
      "id": "2515581172097848576",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Unknown",
      "profile": "https://www.blogger.com/profile/09023765657674084072",
      "pub": "2018-03-31T19:22:39.819+02:00",
      "ref": "3487228703911998255",
      "type": "comment"
    },
    {
      "date": "21 June 2019 23:37",
      "html": "re: EIGRP<br />Only took Cisco 7 or 8 years to get that to work in the real world. The DUAL algorithm is real pretty on paper, but the reality was lot&#39;s of &quot;Stuck in Active&quot;. Stub and other things I don&#39;t recall finally tamped down the flooding issues, but it is still not a very scalable protocol for number of peers you can have. Other than flexible route summarization it isn&#39;t much better than OSPF.",
      "id": "963756624435001332",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Unknown",
      "profile": "https://www.blogger.com/profile/09537727960354678553",
      "pub": "2019-06-21T23:37:19.659+02:00",
      "ref": "3487228703911998255",
      "type": "comment"
    }
  ],
  "count": 13,
  "id": "3487228703911998255",
  "type": "post",
  "url": "2018/03/data-center-routing-with-rift-on.html"
}