{
   "comments": [
      {
         "date": "22 September 2022 09:45",
         "html": "<p>I like SR-MPLS because it doesn&rsquo;t switch labels on every hop, (assuming uniformly configured node SIDs) which makes debugging easier.</p>\n\n<p>I used to think SRv6 was great, until I started looking at what was needed to prevent 3rd parties from sending traffic across weird paths in my network. Then I realised that having a separate layer like MPLS has its benefits :)</p>\n\n<p>It&rsquo;s hard to get traffic to VMs, but it&rsquo;s also much harder for (customer?) VMs to mess with my network&hellip;</p>\n",
         "id": "1381",
         "name": "Sander Steffann",
         "pub": "2022-09-22T09:45:03",
         "type": "comment"
      },
      {
         "comments": [
            {
               "date": "22 September 2022 05:50",
               "html": "<p>... and I&#39;d like to hear about hardware that has problems with MPLS label stack but can handle SRv6 extension headers.</p>\n",
               "id": "1387",
               "name": "Ivan Pepelnjak",
               "pub": "2022-09-22T17:50:08",
               "ref": "1384",
               "type": "comment"
            },
            {
               "date": "22 September 2022 06:17",
               "html": "<p>Completely agree with that.</p>\n",
               "id": "1388",
               "name": "Jorge Ravazzola",
               "pub": "2022-09-22T18:17:47",
               "ref": "1387",
               "type": "comment"
            }
         ],
         "date": "22 September 2022 04:56",
         "html": "<p>Many thanks for such an interesting post.</p>\n\n<p>Do you think vendors current supported label max stack might be an issue when trying to route a packet from source using Adj-SIDs on relatively big sized (and meshed) cores? Many seem to be proposing to use SRv6 to overcome this...</p>\n",
         "id": "1384",
         "name": " Jorge Ravazzola",
         "pub": "2022-09-22T16:56:02",
         "type": "comment"
      },
      {
         "comments": [
            {
               "date": "22 September 2022 05:48",
               "html": "<p>... and the problem with SRv6 is that it doesn&#39;t seem to be supported by commodity hardware at all.</p>\n\n<p>Found a document claiming &quot;25 hardware implementations&quot;, but never found a corresponding list with 25 entries (unless it&#39;s the Jericho chipset, which one could hardly call &quot;commodity&quot;).</p>\n",
               "id": "1386",
               "name": " Ivan Pepelnjak",
               "pub": "2022-09-22T17:48:56",
               "ref": "1385",
               "type": "comment"
            }
         ],
         "date": "22 September 2022 05:02",
         "html": "<p>The problem with SR-MPLS is that it does not play well with commodity hardware and ECMP. The label stack depth renders many commodity ASIC&#39;s unable to make a ECMP decision to send the flow on. Entropy labels doesn&#39;t really help since each takes two-labels and, on some commodity hardware, would require one every 2 SR labels. So the solution is great if you want to continue to purchase big iron ASIC&#39;s for the middle of your network.</p>\n\n<p>SRv6 offsets this via the entropy field. Allowing the ingress point to set a entropy value which mid-points in the network can hash on.</p>\n",
         "id": "1385",
         "name": " David Sinn",
         "pub": "2022-09-22T17:02:58",
         "type": "comment"
      },
      {
         "date": "23 September 2022 11:34",
         "html": "<p>The thing with SR-MPLS is that most of the presentations and slideshows available tend to emphasize how SR-MPLS is based on a lot of stacked MPLS labels or &quot;instructions&quot;, with which to steer the traffic throughout the network via desired path. But at least in our case the main driver for migrating from LDP and RSVP-TE to SR-MPLS was to <em>simplify</em> the network and as such most of our traffic is essentially forwarded with only one transport label, or temporarily with a few if TI-LFA is doing a local repair. It is beautifully simple, easy to understand and debug.</p>\n\n<p>The traffic-engineering capabilities of SR-MPLS are great but I&#39;d hope that people would also value much higher the simplicity that one can achieve with SR-MPLS. This also somehow relates to what Sander wrote above that it is so much fun when the label remains unchanged when the packet traverses through the network.</p>\n\n<p>As a next step we are considering migrating from 6VPE to native IPv6 next-hops in order to get rid of all the IPv6 mapped IPv4 addresses.</p>\n",
         "id": "1391",
         "name": " Antti Ristim√§ki",
         "pub": "2022-09-23T11:34:35",
         "type": "comment"
      },
      {
         "date": "25 September 2022 12:42",
         "html": "<p>I have no clear opinion on SR-mpls vs SRv6 yet. SR-mpls has smaller labels, less overhead. With IPv6 you have one name-space. Both are a benefit, but not decisive for me.</p>\n\n<p>There is one aspect I don&#39;t see mentioned. Because most networks don&#39;t need it. Small(er) networks don&#39;t need it. Datacenter-networks don&#39;t need it. But if you are an ISP or a hyperscaler with a WAN network with several thousands of routers, this aspect becomes important.</p>\n\n<p>When you have a thousand routers in your networks, you can put all of them in one (IS-IS) area. Maybe with 2k routers as well. But when you have several thousand routers, you want to use areas. If only to limit the blast-radius. But there are several technologies where you need to know the SID of the router at the endpoint where you want to send traffic. That means in SR-MPLS you need to advertise the /32 (or /128) of every router in your network. Plus their SID. If you do flex-algo, multiple SIDs even. That starts to add up to a lot of info in your LSPDB. Your L1L2 routers might need to advertise several thousands of prefixes down. This is a practical concern. You can do things like increase lsp-mtu. Or implement RFC5311. I don&#39;t find that an elegant solution.</p>\n\n<p>The best thing would be to have summarizable SIDs. SR-MPLS doesn&#39;t have that. SRv6 does. So there SRv6 has an advantage, imho. But even when you have summarizable SIDs, you still need to know the mapping between /32 (or /128) and the SID. I don&#39;t think there&#39;s a good way to do that yet, besides advertising each individual /32 and SID combination.</p>\n\n<p>I&#39;ve been told a few times that &quot;routing is a solved problem&quot;. I don&#39;t agree. Routing is maybe a solved problem for networks with &lt;= 1000 routers. For larger networks, you still need to use a bunch of trick and kludges to make it work. We could use a better solution.</p>\n",
         "id": "1397",
         "name": " Henk",
         "pub": "2022-09-25T12:42:55",
         "type": "comment"
      }
   ],
   "count": 5,
   "type": "post",
   "url": "2022/09/greenfield-sr-mpls-srv6.html"
}
