{
  "comments": [
    {
      "date": "02 August 2012 22:03",
      "html": "Talking about ideas being rehashed, would SNMP be considered an &quot;API&quot;, and other than some syntax difference what do these new http based API add that snmp couldn&#39;t already do?",
      "id": "543181449604106760",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Brian Christopher Raaen",
      "profile": "http://www.brianraaen.com",
      "pub": "2012-08-02T22:03:28.291+02:00",
      "ref": "5562438818537319448",
      "type": "comment"
    },
    {
      "comments": [
        {
          "date": "14 August 2012 09:27",
          "html": "HTTP/REST is certainly easier in some respects, but SNMP does have quite a few advantages. It supports types, MIBs are an excellent source of documentation for an API and those APIs tend to be considerably more stable than their RESTful cousins (the RabbitMQ management plugin API has changed in every single version I&#39;ve deployed and broken nagios checks every time). Many of these APIs are even standardised (and some vendors even stick to them sometimes). There are some missing things, like properly standardised floats and doubles.<br /><br />Not to mention traps, a decent (if loathed) security model in v3, no TCP 3 way handshake (unless you want it). Stuff like EVENT-MIB and EXPRESSION-MIB give you standard server-side functionality. net-snmp does a pretty good job of doing most of the really hard stuff for you.<br /><br />The real problem for SNMP is that it is something else to learn and doesn&#39;t work well if you stick to the bare minimum. Doing tables properly is hard (that&#39;s trivial in a XML or JSON based REST API). People don&#39;t even think about using things like contexts. MIBs are also scarily close to actually writing documentation, which is never going to go down well with the majority of developers. It hasn&#39;t helped that most examples of SNMP usage try and bypass MIBs completely and use numeric oids for everything which makes examples practically impossible to read and gives SNMP a scary, super complicated air about it. You can do without MIBs, but that doesn&#39;t mean you should, you can always replace the textual values with the OIDs once you&#39;ve worked everything out.<br /><br />I think SNMP&#39;s time may have come, but it has merits that we are losing with HTTP REST APIs, just not ones that people care about that much. How much they should care is open for debate.",
          "id": "6643261082558662931",
          "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
          "name": "Tristan Colgate-McFarlane",
          "profile": "https://www.blogger.com/profile/18013961612317968207",
          "pub": "2012-08-14T09:27:48.910+02:00",
          "ref": "1415977561055230319",
          "type": "comment"
        }
      ],
      "date": "06 August 2012 04:24",
      "html": "In scale, HTTP is quite a bit better than SNMP.  RESTful APIs use HTTP GETs to retrieve data. SNMP is used extensively to retrieve stats data from devices.  When the number of tenants retrieving stats from an infrastructure has to scale to the public, SNMP agents on various devices will indeed stress their control planes.  Most embedded system control planes don&#39;t have an excess of CPU cycles to burn as it is. Nor do they have the intelligence for rate limiting or caching of management requests in scale. <br /><br />With HTTP we have a rich and well proven delivery and caching mechanism which can be used to impose appropriate limits simply by serving requests out of CHEAP and available application level RAM caches. HTTP delivery and rewrite proxies are available at a MUCH lower cost and point of entry than similar mechanism which use SNMP. <br /><br />Even for validating provisioning requests, using HTTP POST or PUT, verse SNMP sets, opens up a world of scripting and coding that SNMP doesn&#39;t support readily. Everyone can setup an HTTP rewrite and cache engine in half a dozen scripting languages.  How many of us can say the same for SNMP?<br /><br />While SNMP is wonderful, it&#39;s not as accessible or as cheap to get working well as HTTP in our day and age. That&#39;s why we are all moving towards HTTP as an application level protocol and web based data structures, like JSON. Ask yourself how many of us thought HTTP would be the world&#39;s most popular transport for video 5 years ago? It is. It may not be as optimal for the job as RTP, but it has won the day. Viva La Web..<br /><br />Frankly, as long as we are flushing the past away, isn&#39;t it better to acknowledge the &#39;sins of Ethernet&#39; and forget transports which demand dynamic MAC address learning? The MAC ACL based solution scaling problems have their root in bad network access control to begin with don&#39;t they? As long as we are throwing the baby out with the bath water, at least don&#39;t fill the tub again with dirty water. We can let Ethernet live on between well define switching nodes and do something else where security (inspection and isolation) as well as churn (service insertion) are a problem. As long as SDN is questioning the faith of the true Ethernet believer, let&#39;s talk some problem with doctrine. <br /><br />Let&#39;s come up with HA and fail-over that works well at L3 and leave L2 un-routed, dumb, fast, and cheap. Adding cost and complexity to L2 seems like going backwards..way backwards.",
      "id": "1415977561055230319",
      "image": "https://lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35",
      "name": "Unknown",
      "profile": "https://www.blogger.com/profile/04982620456797894645",
      "pub": "2012-08-06T04:24:50.812+02:00",
      "ref": "5562438818537319448",
      "type": "comment"
    },
    {
      "date": "14 August 2012 14:29",
      "html": "Thanks I really enjoy the dialog.  I know in reality http/xml is the direction things are moving in since developers are more atuned to it.  However, when people tout it as some revolutionary, completely new, thing I am reminded of &#39;there is nothing new under the sun&#39;",
      "id": "2861509813046610523",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Brian Christopher Raaen",
      "profile": "http://www.brianraaen.com",
      "pub": "2012-08-14T14:29:29.105+02:00",
      "ref": "5562438818537319448",
      "type": "comment"
    },
    {
      "date": "30 August 2012 20:26",
      "html": "Ivan..my question is about Openflow and SDN in general and not releated to this topic..if Openflow is about controlling the dumb network devices from a central server, then we need a &#39;network&#39; for that traffic between the controller and the device...am confused as to how the controller can communicate with the devices that its &#39;trying&#39; to setup a network?",
      "id": "6819560479136347383",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Naveen",
      "profile": null,
      "pub": "2012-08-30T20:26:36.780+02:00",
      "ref": "5562438818537319448",
      "type": "comment"
    }
  ],
  "count": 5,
  "id": "5562438818537319448",
  "type": "post",
  "url": "2012/08/openstackquantum-sdn-based-virtual.html"
}