{
  "comments": [
    {
      "date": "11 November 2009 09:02",
      "html": "Indeed, <br /><br />i&#39;ve been playing with HQF around for some time yesterday and found the same thing - the classes with no explicit bandwidth allocating implicitly get the &quot;remaining&quot; bandwidth guarantee (equally shared between all classes not configured for bandwidth). That&#39;s some surprise, if you still stuck with CBFWQ logic. Most important of all, this means the underlying scheduler is far away from being similar to WFQ in any way.<br /><br />One other nice thing is hierarchical shaping (shape in parent class accompanied by shape in child policy) and explicit bandwidth allocation by the &quot;shape&quot; command (bandwidth guaranteed equal to the shape rate). This reminds me of SRR algorithm used in 3560/3750 platforms. Hey, by the way, I found some really nice statements in the post you linked in your initial HQF post, such as:<br /><br />&quot;Class-Based shaping policy applied to subinterface in HQF code: 512 packets, not tunable (investigate with NSSTG QoS platform Team, should it be tunable)&quot; <br /><br />or the answer to my question about CBWFQ class-default fair-queue + random-detect:<br /><br />&quot;Conversely, if fair-queue and random-detect are used together in class-default, the queue-limit will be ignored and all flow-queues will share the same WRED thresholds. As such, all packets currently enqueued in all flow-queues will be used to calculate the WRED Average Queue Size. Because the Current Queue Size has no upper limit in this configuration, the opportunity for no-buffer drops is high&quot;<br /><br />Furthermore, even though any details on HQF are thoroughly hidden (some of the so-helpful CLI commands are now deprecated), it appears HQF is highly optimized for hardware implementations. And indeed, distributed routing platforms and some multilayer switches now support it. <br /><br />Maybe it the first step toward implementing the dream of unified QoS engine! :)",
      "id": "403317692566776251",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Petr Lapukhov",
      "profile": null,
      "pub": "2009-11-11T09:02:04.000+01:00",
      "ref": "1971908693988420028",
      "type": "comment"
    },
    {
      "date": "11 November 2009 17:48",
      "html": "I think this excerpt from Cisco explains why the new QoS behavior in HQF has worked better than the pre-HQF behavior:<br /><br />&quot;Allocation of Bandwidth to Class Default<br /><br />Old Behavior<br /><br />The default class can use up to 25 percent of total available bandwidth; however, the entire 25 percent is not guaranteed. Rather, it is proportionately shared between different flows in the default class and excess traffic from other bandwidth classes. Thus, the amount of bandwidth that the default class will receive depends on a number of factors, including the total number of flows currently in the router, the bandwidth guarantees (or weights) made to the other user-defined classes, and the number of hash queues in the router. To make minimum bandwidth guarantees to the default class, the bandwidth command needs to be explicitly configured under the class in the policy.<br /><br />New Behavior<br /><br />The class default has a default minimum guarantee that equals the difference between the total available bandwidth (for example, link rate, shaped rate) and the amount of bandwidth guaranteed to the other classes. For example, if 90 percent of bandwidth is allocated to other classes, then the class default is guaranteed the remaining 10 percent. If there is no traffic in the class default, then the other classes share that 10 percent proportionally. Alternatively, the user can explicitly configure the amount of bandwidth that should be available to default class using the bandwidth &lt;x&gt; command. This will lower the guarantee that is given to the class default and allow 10 minus &quot;x&quot; to always be available for the other classes.&quot;<br /><br />It also appears that in HQF Cisco has, by default, allocated a  minimum of 1% bandwidth guarantee to class default.  Please see the excerpt below. If this is true that means the summation of all bandwidth allocations in other classes must be equal to or less than 99%. I need to test it in the lab to confirm. <br /><br />&quot;Max-Reserved-Bandwidth<br /><br />Old Behavior<br /><br />The default maximum reserved bandwidth is 75 percent, so the maximum bandwidth that can be guaranteed to any user-defined class is also 75 percent. If 75 percent of the bandwidth is allocated only for the LLQ, then no minimum bandwidth can be guaranteed to the other classes, and they will share the remaining 25 percent bandwidth with the class default traffic.<br />If more bandwidth needs to be allocated, use the max-reserved-bandwidth command to modify the bandwidth amount that can be reserved for user-defined classes.<br /><br />New Behavior<br /><br />The max-reserved-bandwidth command no longer affects the amount of bandwidth available to a service-policy. 1% must be reserved for the class-default with the rest being available to the users classes. Please also refer to the previous section &quot;Allocation of Bandwidth to Class Default.&quot;&quot;<br /><br />URL of the excerpts:<br /><br />http://www.cisco.com/en/US/technologies/tk543/tk545/technologies_white_paper0900aecd8012032d.html",
      "id": "3834996492564005766",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "William Chu",
      "profile": null,
      "pub": "2009-11-11T17:48:31.000+01:00",
      "ref": "1971908693988420028",
      "type": "comment"
    },
    {
      "date": "11 November 2009 18:28",
      "html": "Yet again, a slightly misleading explanation from Cisco. The remaining (non-reserved) bandwidth is split equally between all classes without explicit bandwidth guarantees, not given to the class-default.",
      "id": "8301065478427805792",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Ivan Pepelnjak",
      "profile": null,
      "pub": "2009-11-11T18:28:01.000+01:00",
      "ref": "1971908693988420028",
      "type": "comment"
    },
    {
      "date": "12 November 2009 00:06",
      "html": "Agree. I also just confirmed in the lab that in HQF, the IOS did implicitly reserve a minimum of 1% bandwidth for class-default. I tried to enter the following QoS in the router. <br /><br />policy-map WAN-QOS<br /> class TCP<br />    bandwidth percent 50<br /> class UDP<br />    bandwidth percent 30<br /> class ICMP<br />    bandwidth percent 20<br />!<br /><br />As you can see above, the summation of all bandwidth queues are = 100%. Before HQF, the above config was accepted in IOS 12.4(15)T10. In IOS 15.0, I got a rejection saying the total was exceeding 99%, see below:<br /><br />!<br />C3825(config)#policy-map WAN-QOS<br />C3825(config-pmap)# class TCP<br />C3825(config-pmap-c)#    bandwidth percent 50<br />C3825(config-pmap-c)# class UDP<br />C3825(config-pmap-c)#    bandwidth percent 30<br />C3825(config-pmap-c)# class ICMP<br />C3825(config-pmap-c)#    bandwidth percent 20<br />Sum total of class bandwidths exceeds 99 percent<br />C3825(config-pmap-c)#<br /><br />It looks as though Cisco is now checking the total bandwidth allocations under a policy-map before the policy was applied to ensure class-default would get its minimum of 1%.<br /><br />When I ran traffic through the router using a traffic generator using the above config (with bandwidth percent changed to 19% under class ICMP), the generator did receive 1% of traffic coming from class default which confirmed the implicit bandwidth reservation bahavior.",
      "id": "5398222870085430055",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "William Chu",
      "profile": null,
      "pub": "2009-11-12T00:06:09.000+01:00",
      "ref": "1971908693988420028",
      "type": "comment"
    },
    {
      "date": "24 February 2014 19:04",
      "html": "I&#39;m finding that I cannot get the SHAPE portion to work in the new HQF.  While it worked great in pre-HQF, post allows all the bandwidth to go through.  Here&#39;s an example.  You will notice that the target shape rate is at 9MBits but it is allowing 10 (which is the max speed that the ISP sends their data through that pipe).<br /><br />    Class-map: FROM_FIBRE (match-any)<br />      391978 packets, 399555763 bytes<br />      30 second offered rate 9849000 bps, drop rate 0 bps<br />      Match: qos-group 1<br />        391976 packets, 399550569 bytes<br />        30 second rate 9849000 bps<br />      Queueing<br />      queue limit 32768 packets<br />      (queue depth/total drops/no-buffer drops) 0/0/0<br />      (pkts output/bytes output) 18950/2510736<br />      shape (average) cir 9500000, bc 38000, be 38000<br />      target shape rate 9500000<br /><br />      Service-policy : TRAFFIC_SHAPE_OUT<br />          ....<br /><br />Any idea why shaping no longer seems to work?",
      "id": "1961254855103514676",
      "image": "https://resources.blogblog.com/img/blank.gif",
      "name": "Anonymous",
      "profile": null,
      "pub": "2014-02-24T19:04:21.323+01:00",
      "ref": "1971908693988420028",
      "type": "comment"
    }
  ],
  "count": 5,
  "id": "1971908693988420028",
  "type": "post",
  "url": "2009/11/first-hqf-impressions-excellent-job.html"
}